// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id             Int        @id @default(autoincrement())
  clerkId        String?    @unique
  firstName      String?
  lastName       String?
  username       String?
  image          String?
  role           UserRole   @default(USER)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  // 
  posts          Post[]     @relation("UserPosts")
  clerkPosts     Post[]     @relation("ClerkUserPosts")
  comments       Comment[]  @relation("UserComments")
  clerkComments  Comment[]  @relation("ClerkUserComments")
  reactions      Reaction[] @relation("UserReactions")
  clerkReactions Reaction[] @relation("ClerkUserReactions")
  views          View[]
}

model Post {
  id             Int        @id @default(autoincrement())
  title          String?
  body           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  // 
  user           User       @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  clerkUser      User?      @relation("ClerkUserPosts", fields: [clerkUserId], references: [clerkId], onDelete: Cascade)
  clerkUserId    String?
  originalPost   Post?      @relation("OriginalPostShares", fields: [originalPostId], references: [id])
  originalPostId Int?
  shares         Post[]     @relation("OriginalPostShares")
  hasSharedPost  Boolean    @default(false)
  comments       Comment[]
  reactions      Reaction[]
  views          View[]
}

model Comment {
  id              Int        @id @default(autoincrement())
  body            String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  // 
  user            User       @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  clerkUser       User?      @relation("ClerkUserComments", fields: [clerkUserId], references: [clerkId], onDelete: Cascade)
  clerkUserId     String?
  post            Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          Int
  parentComment   Comment?   @relation("ParentCommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?
  replies         Comment[]  @relation("ParentCommentReplies")
  reactions       Reaction[]

  @@index([parentCommentId])
}

model Reaction {
  id          String       @id @default(uuid())
  type        ReactionType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  // 
  user        User         @relation("UserReactions", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  clerkUser   User?        @relation("ClerkUserReactions", fields: [clerkUserId], references: [clerkId], onDelete: Cascade)
  clerkUserId String?
  post        Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int?
  comment     Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   Int?

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model View {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  // 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}
